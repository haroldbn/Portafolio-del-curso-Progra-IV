{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Orlando\\\\Desktop\\\\Proyecto Harold Bolanos React\\\\ProyectoHaroldBolanosReact\\\\lista_tareas\\\\src\\\\App\\\\index.js\";\nimport './App.css';\nimport React from 'react';\nimport { UI } from './ui';\nimport { AppProvider } from '../Context';\nimport { Encabezado } from '../Encabezado/';\nimport { BarraBusqueda } from '../BarraBusqueda/';\nimport { ListaTareas } from '../ListaTareas/';\nimport { Tarea } from '../Tarea/';\nimport { AppContext } from '../Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(AppProvider, {\n    children: /*#__PURE__*/_jsxDEV(UI, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n} //   function useSearch(tareas){\n//     //Hooks de React para interactuar con el DOM\n//     const [valorBuscado, buscarTarea] = React.useState('')\n//     //Comportamiento de busqueda\n//     let tareasBuscadas = []\n//     if(valorBuscado.length<=0){\n//       tareasBuscadas = tareas\n//     }else{\n//       tareasBuscadas = tareas.filter(\n//         tarea => {\n//           const textoTarea = tarea.texto.toLowerCase()\n//           const textoBuscado = valorBuscado.toLowerCase()\n//           return textoTarea.includes(textoBuscado)\n//         }\n//       )\n//     }\n//     return [valorBuscado, tareasBuscadas, buscarTarea]\n//   }\n//   function useGetBtc(){\n//     const [data, obtenerData] = React.useState(null)\n//     const consultar = async() => {\n//       const peticion = await fetch('http://api.coindesk.com/v1/bpi/currentprice.json')\n//       const respuesta = await peticion.json()\n//       obtenerData(respuesta)\n//     }\n//     React.useEffect(()=>{\n//       consultar()\n//     }, [])\n//     return data.bpi.USD.rate\n//   }\n// function useCookies(nombreCookie, contenidoCookie){\n//   const almacenamientoLocal = localStorage.getItem(nombreCookie)\n//   let elementoGuardado\n//   if(!almacenamientoLocal){\n//     //No hay una cookie guardada con el nombre dado\n//     const elementoSerializado = JSON.stringify(contenidoCookie)//Serialization\n//     localStorage.setItem(nombreCookie, elementoSerializado)//En esta linea se crea la cookie\n//     elementoGuardado = contenidoCookie //\n//   }else{\n//     //Existe una cookie con el nombre dado que ya tiene tareas\n//     elementoGuardado = JSON.parse(almacenamientoLocal)//Deserialization\n//   }\n//   const [elemento, setElemento] = React.useState(elementoGuardado)\n//   const guardar = (elementos) =>{\n//     if(elementos.length <= 0){\n//       localStorage.removeItem(nombreCookie)\n//     }else{\n//       const elementosSerializados = JSON.stringify(elementos)\n//       localStorage.setItem(nombreCookie, elementosSerializados)\n//     }\n//     setElemento(elementos)\n//   }\n//   return [elemento, guardar]\n// }\n//   function App(){  \n//     const contenidoLista = [\n//       {texto: \"Tarea 1 XX\", completada: false},\n//       {texto: \"Tarea 2 XX\", completada: false},\n//       {texto: \"Tarea 3\", completada: true}\n//     ]\n//     const nombreLista = \"MI_LISTA_TAREAS\"\n//     //Uso de custom hooks\n//     const[tareas, guardar] = useCookies(nombreLista, contenidoLista)\n//     const[valorBuscado, tareasBuscadas, buscarTarea] = useSearch(tareas)\n//     const {btc, error} = useGetBtc()\n//     const tareasCompletadas = tareas.filter(tarea => tarea.completada).length\n//     const totalTareas = tareas.length\n//     const completar = (texto) =>{\n//       const indice = tareas.findIndex(tarea => tarea.texto == texto)\n//       const nuevaLista = [...tareas]\n//       nuevaLista[indice].completada = !nuevaLista[indice].completada\n//       guardar(nuevaLista)\n//     }\n//     const borrar = (texto) =>{\n//       const indice = tareas.findIndex(tarea => tarea.texto == texto)\n//       const nuevaLista = [...tareas]\n//       nuevaLista.splice(indice,1)\n//       guardar(nuevaLista)\n//     }\n//     const nombreAutorCookie = 'NOMBRE_AUTOR'\n//     const nombreAutorValor = 'JANE DOE'\n//     const [nombreDelAutor] = useCookies(nombreAutorCookie, nombreAutoValor)\n//     return(\n//       <AppContext.Provider value={{\n//       btc,\n//       error,\n//       tareasCompletadas,\n//       totalTareas,\n//       valorBuscado,\n//       buscarTarea,\n//       tareasBuscadas,\n//       completar,\n//       borrar,\n//       nombreDelAutor\n//     }}>\n//     {props.children}\n//     </AppContext.Provider>\n//     )\n// // return(\n// //   <UI\n// //   btc={btc}\n// //   error = {error}\n// //   tareasCompletadas={tareasCompletadas}\n// //   totalTareas={totalTareas}\n// //   valorBuscado={valorBuscado}\n// //   buscarTarea={buscarTarea}\n// //   tareasBuscadas={tareasBuscadas}\n// //   completar={completar}\n// //   borrar={borrar}\n// //   nombreDelAutor={nombreDelAutor}\n// //   />\n// // )\n// function UI({\n//   btc,\n//   tareasCompletadas,\n//   totalTareas,\n//   valorBuscado,\n//   buscarTarea,\n//   tareasBuscadas,\n//   completar,\n//   borrar,\n//   nombreDelAutor\n// }){\n// return(\n//   <React.Fragment>\n//     <Encabezado\n//     completadas={tareasCompletadas}\n//     total={totalTareas}\n//     />\n//     <BarraBusqueda\n//     valorBusqueda={valorBuscado}\n//     funcionBuscar={buscarTarea}\n//     />\n//     <ListaTareas>\n//     {<p>Valor de 1 Bitcoin: {btc}</p>}\n//     {<p>{error}</p>}\n//     {tareasBuscadas.map(tarea =>(\n//       <Tarea\n//       texto={tarea.texto}\n//       completada={tarea.completada}\n//       onComplete={()=>completar(tarea.texto)}\n//       onDelete={()=>borrar(tarea.texto)}\n//       />\n//     ))}\n//     </ListaTareas>\n//     <p>Autor: {nombreDelAutor}</p>\n//     </React.Fragment>\n// )\n// }\n// }\n\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Orlando/Desktop/Proyecto Harold Bolanos React/ProyectoHaroldBolanosReact/lista_tareas/src/App/index.js"],"names":["React","UI","AppProvider","Encabezado","BarraBusqueda","ListaTareas","Tarea","AppContext","App"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,SAASC,WAAT,QAA4B,YAA5B;AAEA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,WAAT,QAA2B,iBAA3B;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,UAAT,QAA2B,YAA3B;;;AAEA,SAASC,GAAT,GAAe;AACb,sBACE,QAAC,WAAD;AAAA,2BACE,QAAC,EAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,C,CAED;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;KA1LSA,G;AA4LT,eAAeA,GAAf","sourcesContent":["import './App.css'\nimport React from 'react'\nimport { UI } from './ui'\nimport { AppProvider } from '../Context'\n\nimport { Encabezado } from '../Encabezado/'\nimport { BarraBusqueda } from '../BarraBusqueda/'\nimport { ListaTareas} from '../ListaTareas/'\nimport { Tarea } from '../Tarea/'\nimport { AppContext } from '../Context'\n\nfunction App() {\n  return (\n    <AppProvider>\n      <UI />\n    </AppProvider>\n  )\n}\n\n//   function useSearch(tareas){\n//     //Hooks de React para interactuar con el DOM\n//     const [valorBuscado, buscarTarea] = React.useState('')\n\n//     //Comportamiento de busqueda\n//     let tareasBuscadas = []\n//     if(valorBuscado.length<=0){\n//       tareasBuscadas = tareas\n//     }else{\n//       tareasBuscadas = tareas.filter(\n//         tarea => {\n//           const textoTarea = tarea.texto.toLowerCase()\n//           const textoBuscado = valorBuscado.toLowerCase()\n//           return textoTarea.includes(textoBuscado)\n//         }\n//       )\n//     }\n//     return [valorBuscado, tareasBuscadas, buscarTarea]\n//   }\n  \n//   function useGetBtc(){\n//     const [data, obtenerData] = React.useState(null)\n\n//     const consultar = async() => {\n//       const peticion = await fetch('http://api.coindesk.com/v1/bpi/currentprice.json')\n//       const respuesta = await peticion.json()\n//       obtenerData(respuesta)\n//     }\n\n//     React.useEffect(()=>{\n//       consultar()\n//     }, [])\n\n//     return data.bpi.USD.rate\n    \n//   }\n  \n// function useCookies(nombreCookie, contenidoCookie){\n//   const almacenamientoLocal = localStorage.getItem(nombreCookie)\n//   let elementoGuardado\n\n//   if(!almacenamientoLocal){\n//     //No hay una cookie guardada con el nombre dado\n//     const elementoSerializado = JSON.stringify(contenidoCookie)//Serialization\n//     localStorage.setItem(nombreCookie, elementoSerializado)//En esta linea se crea la cookie\n//     elementoGuardado = contenidoCookie //\n//   }else{\n//     //Existe una cookie con el nombre dado que ya tiene tareas\n//     elementoGuardado = JSON.parse(almacenamientoLocal)//Deserialization\n//   }\n//   const [elemento, setElemento] = React.useState(elementoGuardado)\n//   const guardar = (elementos) =>{\n//     if(elementos.length <= 0){\n//       localStorage.removeItem(nombreCookie)\n//     }else{\n//       const elementosSerializados = JSON.stringify(elementos)\n//       localStorage.setItem(nombreCookie, elementosSerializados)\n//     }\n//     setElemento(elementos)\n//   }\n//   return [elemento, guardar]\n// }\n\n//   function App(){  \n\n//     const contenidoLista = [\n//       {texto: \"Tarea 1 XX\", completada: false},\n//       {texto: \"Tarea 2 XX\", completada: false},\n//       {texto: \"Tarea 3\", completada: true}\n//     ]\n    \n//     const nombreLista = \"MI_LISTA_TAREAS\"\n\n//     //Uso de custom hooks\n//     const[tareas, guardar] = useCookies(nombreLista, contenidoLista)\n//     const[valorBuscado, tareasBuscadas, buscarTarea] = useSearch(tareas)\n    \n//     const {btc, error} = useGetBtc()\n\n//     const tareasCompletadas = tareas.filter(tarea => tarea.completada).length\n//     const totalTareas = tareas.length\n\n//     const completar = (texto) =>{\n//       const indice = tareas.findIndex(tarea => tarea.texto == texto)\n//       const nuevaLista = [...tareas]\n//       nuevaLista[indice].completada = !nuevaLista[indice].completada\n//       guardar(nuevaLista)\n//     }\n\n//     const borrar = (texto) =>{\n//       const indice = tareas.findIndex(tarea => tarea.texto == texto)\n//       const nuevaLista = [...tareas]\n//       nuevaLista.splice(indice,1)\n//       guardar(nuevaLista)\n//     }\n\n//     const nombreAutorCookie = 'NOMBRE_AUTOR'\n//     const nombreAutorValor = 'JANE DOE'\n//     const [nombreDelAutor] = useCookies(nombreAutorCookie, nombreAutoValor)\n\n\n\n//     return(\n//       <AppContext.Provider value={{\n//       btc,\n//       error,\n//       tareasCompletadas,\n//       totalTareas,\n//       valorBuscado,\n//       buscarTarea,\n//       tareasBuscadas,\n//       completar,\n//       borrar,\n//       nombreDelAutor\n//     }}>\n//     {props.children}\n//     </AppContext.Provider>\n//     )\n\n\n\n   \n// // return(\n// //   <UI\n// //   btc={btc}\n// //   error = {error}\n// //   tareasCompletadas={tareasCompletadas}\n// //   totalTareas={totalTareas}\n// //   valorBuscado={valorBuscado}\n// //   buscarTarea={buscarTarea}\n// //   tareasBuscadas={tareasBuscadas}\n// //   completar={completar}\n// //   borrar={borrar}\n// //   nombreDelAutor={nombreDelAutor}\n// //   />\n// // )\n\n// function UI({\n//   btc,\n//   tareasCompletadas,\n//   totalTareas,\n//   valorBuscado,\n//   buscarTarea,\n//   tareasBuscadas,\n//   completar,\n//   borrar,\n//   nombreDelAutor\n// }){\n  \n// return(\n//   <React.Fragment>\n//     <Encabezado\n//     completadas={tareasCompletadas}\n//     total={totalTareas}\n//     />\n//     <BarraBusqueda\n//     valorBusqueda={valorBuscado}\n//     funcionBuscar={buscarTarea}\n//     />\n//     <ListaTareas>\n//     {<p>Valor de 1 Bitcoin: {btc}</p>}\n//     {<p>{error}</p>}\n//     {tareasBuscadas.map(tarea =>(\n//       <Tarea\n//       texto={tarea.texto}\n//       completada={tarea.completada}\n//       onComplete={()=>completar(tarea.texto)}\n//       onDelete={()=>borrar(tarea.texto)}\n//       />\n//     ))}\n//     </ListaTareas>\n//     <p>Autor: {nombreDelAutor}</p>\n//     </React.Fragment>\n// )\n// }\n\n\n\n// }\n\nexport default App;"]},"metadata":{},"sourceType":"module"}